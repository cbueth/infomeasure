image: mambaorg/micromamba

stages:
  - test
  - coverage
  - deploy

.pythonVersions:
  parallel:
    matrix:
      - PYTHON_VERSION: [ "3.13", "3.12", "3.11" ]
  maxVersion:
    PYTHON_VERSION: "3.13"

before_script:
  - micromamba install -y -n base -c conda-forge python=${PYTHON_VERSION} -f requirements/build_requirements.txt -f requirements/linter_requirements.txt -f requirements/test_requirements.txt -f requirements/doc_requirements.txt -f requirements/packaging_requirements.txt
  - pip install --no-build-isolation --no-deps -e .

# Test on all python versions on push to main branch, and on bi-weekly schedule
test:
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - infomeasure/**/*
        - tests/**/*
        - pyproject.toml
        - requirements/**
    - if: $CI_PIPELINE_SOURCE == "schedule"
  parallel: !reference [ .pythonVersions,parallel ]
  script:
    - micromamba list
    - pytest tests/
  artifacts:
    expire_in: 1 month

# coverage report - on any change to code and on main branch for coverage badge
coverage:
  stage: coverage
  coverage: /^TOTAL.+?(\d+\%)$/
  needs: [ ]
  rules:
    - changes:
        compare_to: 'refs/heads/main'
        paths:
          - infomeasure/**/*
          - tests/**/*
          - pyproject.toml
          - requirements/**
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables: !reference [ .pythonVersions,maxVersion ]
  script:
    - pytest --cov --cov-report term
  artifacts:
    expire_in: 1 month

# build documentation to gitlab pages, only on main branch
pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - sphinx-apidoc -o docs/api/ infomeasure/ -f
    - sphinx-build docs/ public -b dirhtml
  artifacts:
    paths:
      - public
    expire_in: 1 month
  environment:
    name: production
    url: https://${CI_PROJECT_NAMESPACE}.pages.ifisc.uib-csic.es/${CI_PROJECT_NAME}

# deploy to gitlab package registry on tag and latest main branch
build:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes: [ infomeasure/_version.py ]
  variables:
    TWINE_USERNAME: gitlab-ci-token
    TWINE_PASSWORD: $CI_JOB_TOKEN
  script:
    - mkdir -p dist
    - python -m build
    - twine check dist/*
    - |
      twine upload \
      --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi \
      --non-interactive --skip-existing dist/*
  dependencies:
    - test
  environment:
    name: production
    url: https://pypi.org/project/${CI_PROJECT_NAME}
