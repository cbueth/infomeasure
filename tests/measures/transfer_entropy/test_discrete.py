"""Explicit discrete transfer entropy estimator tests."""

import pytest

from infomeasure.measures.transfer_entropy import DiscreteTEEstimator


@pytest.mark.parametrize(
    "data_source,data_dest,prop_time,step_size,src_hist_len,dest_hist_len,expected",
    [
        # prop_time = 0, no slicing
        ([1, 1], [0, 0], 0, 1, 1, 1, 0.0),
        ([1, 1], [1, 1], 0, 1, 1, 1, 0.7548875021634682),
        ([1, 1, 1, 1, 1], [1, 1, 1, 1, 1], 0, 1, 1, 1, 0.7548875021634682),
        ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 0, 1, 1, 1, 0.5661656266226016),
        ([0, 1, 2, 3, 4], [1, 2, 3, 4, 5], 0, 1, 1, 1, 0.3774437510817341),
        ([1, 2, 3, 4, 5], [0, 1, 2, 3, 4], 0, 1, 1, 1, 1.0661656266226016),
        ([1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0], 0, 1, 1, 1, 0.7354632006732273),
        ([1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], 0, 1, 1, 1, 0.7935620117638902),
        # prop_time = 1, no slicing
        ([1, 1, 1, 1, 1], [1, 1, 1, 1, 1], 1, 1, 1, 1, 0.7548875021634682),
        ([1, 1, 1, 1, 1], [0, 0, 0, 0, 0], 1, 1, 1, 1, 0.0),
        ([1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0], 1, 1, 1, 1, 0.7548875021634687),
        ([1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], 1, 1, 1, 1, 0.7548875021634687),
        # prop_time = 2, no slicing
        ([1, 1, 1, 1, 1], [1, 1, 1, 1, 1], 2, 1, 1, 1, 0.7548875021634682),
        ([1, 1, 1, 1, 1], [0, 0, 0, 0, 0], 2, 1, 1, 1, 0.0),
        ([1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0], 2, 1, 1, 1, 0.6999551567032918),
        ([1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], 2, 1, 1, 1, 0.8633634885943124),
        # prop_time = 0, slicing
        ([1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0], 0, 1, 2, 2, 0.854752972273344),
        ([1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0], 0, 1, 3, 3, 0.8812794235977364),
        ([1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0], 0, 1, 1, 2, 0.49022499567306266),
        ([1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0], 0, 1, 2, 1, 1.2451124978365313),
        ([1, 2, 3, 4] * 10, [1, 2, 3, 4] * 10, 0, 1, 1, 1, 0.7542380832531079),
        ([1, 2, 3, 4] * 10, [1, 2, 3, 4] * 10, 0, 2, 1, 1, 0.7535544844000959),
        ([1, 2, 3, 4] * 10, [1, 2, 3, 4] * 10, 0, 1, 1, 2, 0.4902247133356856),
        ([1, 2, 3, 4] * 10, [1, 2, 3, 4] * 10, 0, 1, 2, 1, 1.243779197735782),
        ([1, 2, 3, 4] * 10, [1, 2, 3, 4] * 10, 0, 1, 3, 1, 1.609401128930581),
        ([1, 2, 3, 4] * 10, [1, 2, 3, 4] * 10, 0, 1, 1, 3, 0.36431916874493986),
        ([1, 2, 3, 4] * 10, [1, 2, 3, 4] * 10, 0, 1, 3, 2, 1.1449594037442017),
        ([1, 2, 3, 4] * 10, [1, 2, 3, 4] * 10, 0, 4, 1, 1, 0.7548875021634682),
        # further
        ([1, 2, 3, 4] * 10, [1, 2, 3, 4] * 10, 1, 4, 2, 1, 1.2451124978365318),
        ([1, 2, 3, 4] * 10, [1, 2, 3, 4] * 10, 2, 4, 1, 1, 0.7548875021634682),
        ([1, 2, 3, 4] * 10, [1, 2, 3, 4] * 10, 3, 2, 1, 2, 0.4912940766856413),
    ],
)
def test_discrete_te(
    data_source,
    data_dest,
    prop_time,
    step_size,
    src_hist_len,
    dest_hist_len,
    expected,
):
    """Test the discrete transfer entropy estimator."""
    est = DiscreteTEEstimator(
        data_source,
        data_dest,
        prop_time=prop_time,
        step_size=step_size,
        src_hist_len=src_hist_len,
        dest_hist_len=dest_hist_len,
        base=2,
    )
    res = est.results()
    assert isinstance(res, float)
    assert res == pytest.approx(expected)


@pytest.mark.parametrize(
    "data_source,data_dest,base,expected",
    [
        ([1, 1], [0, 0], 2, 0.0),
        ([1, 1], [0, 0], 10, 0.0),
        ([1, 1], [0, 0], 16, 0.0),
        ([1, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1], 2, 0.7935620117638902),
        ([1, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1], 10, 0.23888596896038405),
        ([1, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1], 16, 0.19839050294097255),
    ],
)
def test_discrete_te_base(data_source, data_dest, base, expected):
    """Test the discrete transfer entropy estimator with different bases."""
    est = DiscreteTEEstimator(data_source, data_dest, base=base)
    res = est.results()
    assert isinstance(res, float)
    assert res == pytest.approx(expected)
